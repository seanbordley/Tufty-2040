import os
import time
import gc
from picographics import PicoGraphics, DISPLAY_TUFTY_2040
from jpegdec import JPEG

# Initialize display and JPEG decoder
display = PicoGraphics(display=DISPLAY_TUFTY_2040)
j = JPEG(display)

# Base directory
base_dir = "/Disco"
image_format = ".jpg"  # File format is JPEG

def get_image_number(filename):
    # Remove the .jpg extension if it exists and try to convert to an integer
    if filename.endswith(image_format):
        base_name = filename[: -len(image_format)]
    else:
        base_name = filename
    try:
        return int(base_name)
    except ValueError:
        return float('inf')  # Non-numeric filenames go to the end

def get_sleep_time(folder_path):
    """Reads the sleep time from a config.txt file in the folder, defaults to 0.01 if not found."""
    config_file = os.path.join(folder_path, "config.txt")
    try:
        with open(config_file, 'r') as f:
            return float(f.readline().strip())
    except (FileNotFoundError, ValueError):
        return 0.01  # Default sleep time

def play_gif_in_folder(folder_path):
    """Play images in the specified folder with the sleep time from config.txt."""
    images = [f"{folder_path}/{file}" for file in sorted(os.listdir(folder_path), key=get_image_number) if file.endswith(image_format)]
    sleep_time = get_sleep_time(folder_path)
    
    if not images:
        print(f"No images found in {folder_path}.")
        return

    while True:
        for img_path in images:
            try:
                # Reuse the JPEG object to avoid reinitialization overhead
                j.open_file(img_path)
                j.decode()
                display.update()
                
                # Use the dynamic sleep time
                time.sleep(sleep_time)

                # Run garbage collection to free memory after each frame
                gc.collect()

            except OSError:
                print(f"Warning: {img_path} not found or cannot be opened.")
            except Exception as e:
                print(f"Error displaying image {img_path}: {e}")
                continue

try:
    # Loop through folders within the base directory and play GIFs
    for folder in sorted(os.listdir(base_dir)):
        folder_path = os.path.join(base_dir, folder)
        if os.path.isdir(folder_path):  # Ensure it's a directory
            print(f"Playing images in folder: {folder_path}")
            play_gif_in_folder(folder_path)
except KeyboardInterrupt:
    display.clear()  # Clear display when script is interrupted
